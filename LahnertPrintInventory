//AUTHOR: Austin Lahnert
//Class: CPT187
//Create Date: 9/30/21
//Purpose: This program is designed to help the user
//keep track of their searches. It shows them how many
//searches are found and not found, as well as how
//many files are successfully loaded and not. 
//It will also search through the file for the users selected
//search value.

package edu.cpt187.lahnert.project6;

//importing classes needed to file read
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Scanner;

public class PrintInventory 
{

	//declaring and preparing all class attributes
	private final int RESET = 0;
	private final int NOT_FOUND = -1;
	private final int ONE = 1;
	private final int MAXIMUM_RECORDS = 75;

	private String[] printSubjects = new String[MAXIMUM_RECORDS];
	private String[] printVerbs = new String[MAXIMUM_RECORDS];
	private String[] printPrepositions = new String[MAXIMUM_RECORDS];
	private String[] printObjects = new String[MAXIMUM_RECORDS];
	private int[] printLengths = new int[MAXIMUM_RECORDS];
	private int[] orderQuantities = new int[MAXIMUM_RECORDS];
	private double[] orderTotals = new double[MAXIMUM_RECORDS];
	private int recordCount = 0;
	private int searchedIndex = 0;
	private int fileCount = 0;
	private int filesFound = 0;
	private int searchCount = 0;
	private int searchesFound = 0;

	//default constructor
	public PrintInventory()
	{

	}//end of default constructor

	//setters section

	//setter for print arrays
	public void setPrintArrays(String borrowedFileName)
	{
		//try block to assign items
		try
		{
			//assigning record count to reset value to make it zero again
			recordCount = RESET;

			//creating a instance for the scanner
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));

			//while statement to assign each record in the file
			while(infile.hasNext() == true && recordCount < MAXIMUM_RECORDS)
			{

				//reading one record at a time and assigning to proper arrays
				printSubjects[recordCount] = infile.next();
				printVerbs[recordCount] = infile.next();
				printPrepositions[recordCount] = infile.next();
				printObjects[recordCount] = infile.next();
				recordCount++;//incrementing record count

			}//end of while


			//closing the file scanner
			infile.close();

			//invoking bubble sort
			setBubbleSort();

			//incrementing files found
			filesFound++;

		}//end of try block

		catch(IOException ex)
		{

			//if file is not found or opened will throw catch exception and set to not found
			recordCount = NOT_FOUND;

		}//end of catch block

		//incrementing file open attempts count
		fileCount++;

	}//end of set for print arrays

	//setter for print arrays
	public void setPrintArrays(String borrowedFileName, int borrowedSize)
	{
		//try block to assign items
		try
		{
			//assigning record count to reset value to make it zero again
			recordCount = RESET;

			//creating a instance for the scanner
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));

			//while statement to assign each record in the file
			while(infile.hasNext() == true && recordCount < MAXIMUM_RECORDS && recordCount < borrowedSize)
			{

				//reading one record at a time and assigning to proper arrays
				printSubjects[recordCount] = infile.next();//assigns next string to subjects
				printVerbs[recordCount] = infile.next();//assigns next string to verbs
				printPrepositions[recordCount] = infile.next();//assigns next string to prepositions
				printObjects[recordCount] = infile.next();//assigns next string to objects
				printLengths[recordCount] = infile.nextInt();//assigns next integer to print lengths
				orderQuantities[recordCount] = infile.nextInt();//assigns next integer to order quantities
				orderTotals[recordCount] = infile.nextDouble();//assigns next double to order totals
				recordCount++;//incrementing record count

			}//end of while


			//closing the file scanner
			infile.close();

			//invoking bubble sort
			setBubbleSort();

		}//end of try block

		catch(IOException ex)
		{

			//if file is not found or opened will throw catch exception and set to not found
			recordCount = NOT_FOUND;

		}//end of catch block

	}//end of set for print arrays

	//setter for resetting search counts
	public void setResetSearchCounts()
	{
		//resetting the search count and search found count
		searchCount = RESET;
		searchesFound = RESET;
	}//end of setter for resetting the search counts

	//setter for searching the index
	public void setSearchedIndex(String borrowedSubject)
	{
		//assigning the search to searched index
		searchedIndex = getBinSearch(borrowedSubject);
	}//end of the search setter

	//setter for bubble sort 
	public void setBubbleSort()
	{
		//creating local last
		int localLast = recordCount - ONE;

		//while statement to sort array
		while(localLast > RESET)
		{
			//initializing local index and local swap
			int localIndex = RESET;
			boolean localSwap = false;
			//while loop to sort
			while(localIndex< localLast)
			{

				//if statement to determine if needed to be swapped
				if(printSubjects[localIndex].compareToIgnoreCase(printSubjects[localIndex + ONE]) > 0)
				{
					//swapping array elements
					setSwapArrayElements(localIndex);
					//setting local swap to true
					localSwap = true;
				}//end of if

				//incrementing local index
				localIndex++;
			}//end of while for swapping loop

			//determining if a swap was performed
			if(localSwap == false)
			{
				//setting local last to zero
				localLast = RESET;
			}//end of if
			else
			{
				//decrementing local last
				localLast --;
			}//end of else

		}//end of while loop to bubble sort array

	}//end of setter for bubble sort

	//setter for swapping array elements
	public void setSwapArrayElements(int borrowedIndex)
	{
		//initializing local values to use for swapping values
		String localPrintSubject = "";
		String localPrintVerb = "";
		String localPrintPreposition = "";
		String localPrintObject = "";
		int localPrintLength = RESET;
		int localOrderQuantity = RESET;
		double localOrderTotal = 0.0;

		//swapping subject
		localPrintSubject = printSubjects[borrowedIndex];
		printSubjects[borrowedIndex] = printSubjects[borrowedIndex + ONE];
		printSubjects[borrowedIndex + ONE] = localPrintSubject;

		//swapping verb
		localPrintVerb = printVerbs[borrowedIndex];
		printVerbs[borrowedIndex] = printVerbs[borrowedIndex + ONE];
		printVerbs[borrowedIndex + ONE] = localPrintVerb;

		//swapping preposition
		localPrintPreposition = printPrepositions[borrowedIndex];
		printPrepositions[borrowedIndex] = printPrepositions[borrowedIndex + ONE];
		printPrepositions[borrowedIndex + ONE] = localPrintPreposition;

		//swapping object
		localPrintObject = printObjects[borrowedIndex];
		printObjects[borrowedIndex] = printObjects[borrowedIndex + ONE];
		printObjects[borrowedIndex + ONE] = localPrintObject;

		//swapping print length
		localPrintLength = printLengths[borrowedIndex];
		printLengths[borrowedIndex] = printLengths[borrowedIndex + ONE];
		printLengths[borrowedIndex + ONE] = localPrintLength;

		//swapping quantities
		localOrderQuantity = orderQuantities[borrowedIndex];
		orderQuantities[borrowedIndex] =orderQuantities[borrowedIndex + ONE];
		orderQuantities[borrowedIndex + ONE] = localOrderQuantity;

		//swapping total
		localOrderTotal = orderTotals[borrowedIndex];
		orderTotals[borrowedIndex] = orderTotals[borrowedIndex + ONE];
		orderTotals[borrowedIndex + ONE] = localOrderTotal;
	}//end of swap array elements


	//getter section

	//getter for search results
	public int getBinSearch(String borrowedBorrowedSubject)
	{
		//creating local last to use for searching
		//creating local found to use when what we are searching for is found
		//creating local mid to use to search from middle of array
		int localFirst = RESET;
		int localLast = recordCount - ONE;
		int localMid = RESET;
		boolean localFound = false;
		//creating a number so we do not use non hard coded value such as 2
		//since it did not ask us to make it a final in the UML given I set it here
		int localTwo = ONE + ONE;

		//creating a while loop to search the array
		while(localFirst <= localLast && localFound == false)
		{
			//making local mid actually equally to the middle of the array
			localMid = (localFirst + localLast)/localTwo;


			//if to determine if local mid is equal to search value
			if(printSubjects[localMid].equalsIgnoreCase(borrowedBorrowedSubject) == true)
			{
				//found ID return to the end of the search
				localFound = true;

				//incrementing searches found
				searchesFound++;
			}//end of if

			else if(printSubjects[localMid].compareToIgnoreCase(borrowedBorrowedSubject) < 0)
			{
				//assigning local first to the next in the array
				localFirst = localMid + ONE;
			}//end of if

			else
			{
				//assigning local last to the next up in the array
				localLast = localMid - ONE;

			}//end of else

		}//end of while

		//determining if value was found

		if(localFound == false)
		{
			//assigning not found value to returning value
			localMid = NOT_FOUND;
		}//end of if

		//incrementing search count
		searchCount++;

		return localMid;
	}//end of bin search getter

	//getter for maximum records
	public int getMaximumRecords()
	{
		return MAXIMUM_RECORDS;//returning the max records
	}//end of getter

	//getter for record count
	public int getRecordCount()
	{
		return recordCount;//return record count
	}//end of getter

	//getter for searched index
	public int getSearchedIndex()
	{
		return searchedIndex;//return searched index
	}//end of getter

	//getter for print subjects
	public String[] getPrintSubjects()
	{
		return printSubjects;//returning the print subjects array
	}//end of getter

	//getter for print verbs
	public String[] getPrintVerbs()
	{
		return printVerbs; //returning the print verbs array
	}//end of getter

	//getter for print prepositions
	public String[] getPrintPrepositions()
	{
		return printPrepositions;//returning the print prepositions array
	}//end of getter

	//getter for print objects
	public String[] getPrintObjects()
	{
		return printObjects; //returning the print objects array
	}//end of getter

	//getter for print length
	public int[] getPrintLengths()
	{
		return printLengths;//returning the print lengths
	}//end of getter

	//getter for order quantities 
	public int[] getOrderQuantities()
	{
		return orderQuantities;//returning the order quantities
	}//end of getter 

	//getter for order totals
	public double[] getOrderTotals()
	{
		return orderTotals;//returning the order totals
	}//end of getter

	//getter for file count
	public int getFileCount()
	{
		return fileCount;//returning file count
	}//end of getter

	//getter for files found
	public int getFilesFound()
	{
		return filesFound;//returning files found
	}//end of getter

	//getter for files not found
	public int getFilesNotFound()
	{
		return (fileCount - filesFound);//returning amount of files not found
	}//end of getter

	//getter for search count
	public int getSearchCount()
	{
		return  searchCount;//returning search count
	}//end of getter

	//getter for searches found
	public int getSearchesFound()
	{
		return searchesFound;//returning searches found
	}//end of getter

	//getter for searches not found
	public int getSearchesNotFound()
	{
		return (searchCount - searchesFound);//returning searches not found amount
	}//end of getter

	//getter for integer for get the written order total quantities
	public int getWrittenOrderTotalQuantity()
	{
		//creating local values to use to get accumulated quantity
		int localTotalQuantity = RESET;
		int localIndex = RESET;

		while(localIndex < orderQuantities.length)
		{
			//getting total of all quantities
			localTotalQuantity = localTotalQuantity + orderQuantities[localIndex];
			localIndex++;
		}//end of while

		//returning total quantity
		return localTotalQuantity;
	}//end of getter

	//getter for the written order total cost
	public double getWrittenOrderTotalCost()
	{
		//creating local values to use to get accumulated total cost
		double localTotalCost = RESET;
		int localIndex = RESET;

		while(localIndex < orderTotals.length)
		{
			//getting total of all total cost
			localTotalCost = localTotalCost + orderTotals[localIndex];
			localIndex++;
		}//end of while

		//returning total cost
		return localTotalCost;
	}//end of getter

}//end of print inventory class
