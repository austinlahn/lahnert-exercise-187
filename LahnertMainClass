//AUTHOR: Austin Lahnert
//Class: CPT187
//Create Date: 9/30/21
//Purpose: This program is designed to allow the user
//to shop and search for items in the catalog. 
//The user first needs to create and successfully 
//login with the password and user name they choose.
//Then the user can continue to shop and will receive
//a order report at the end of their shopping.

package edu.cpt187.lahnert.project6;

//importing the scanner
import java.util.Scanner;

public class MainClass 
{

	//declaring class constants
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] SUB_MENU_CHARS = {'A', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load the Catalog", "Return to Main Menu"};
	public static final String[] SEARCH_MENU_OPTIONS = {"Search the Catalog", "Return to File Menu"};
	public static final String[] PURCHASE_MENU_OPTIONS = {"Process the Order", "Return to the  Search Menu"};
	public static final String CATALOG_FILE_NAME = "MasterCatalogFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	//main method
	public static void main(String[] args)
	{


		//creating an instantiation of the classes
		PrintInventory currentInventory = new PrintInventory();
		CustomerOrder currentOrder = new CustomerOrder();
		WritePurchaseOrders purchaseOrders = new WritePurchaseOrders(CATALOG_FILE_NAME);
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		//declaring the scanner
		Scanner input = new Scanner(System.in);

		//declaring all local variables
		String userName = "";
		char menuSelection = ' ';

		//displaying welcome 
		displayWelcomeBanner();

		//getting main menu selection
		menuSelection = validateMenuSelection(input);

		//while loop for main menu selection 
		while(menuSelection != 'Q')
		{
			//setting user account
			currentUser.setUserAccountArrays();

			//getting user name
			userName = getUserName(input);

			//determining menu selection 
			if(menuSelection != 'A')
			{
				//searching for user name 
				currentUser.setSearchedIndex(userName);

				//seeing if user name exists
				if(currentUser.getSearchedIndex()>=0)
				{
					//displaying account already exist
					displayAccountResults(userName);
				}//end of if
				else
				{
					//creating account
					currentUser.setWriteOneRecord(userName, getPassword(input));

					//displaying account results
					displayAccountResults();
				}//end of else
			}//end of if
			
			//else for menu selection
			else
			{
				//searching for login info 
				currentUser.setSearchedIndex(userName, getPassword(input));

				//seeing if login is correct
				if(currentUser.getSearchedIndex()< 0)
				{
					//display login error
					displayLoginError();
				}//end of if
				
				//else for searched index
				else
				{
					//getting file selection
					menuSelection = validateFileSelection(input);

					//while statement for file selection loop
					while(menuSelection != 'R')
					{
						//setting array for file
						currentInventory.setPrintArrays(getFileName(input));

						//determining if file found
						if(currentInventory.getRecordCount()<=0)
						{
							//display file error
							displayFileError();
						}//end of if
						
						//else for record count
						else
						{
							//displaying record report
							displayRecordReport(currentInventory.getRecordCount());

							//getting search selection
							menuSelection = validateSearchSelection(input);

							//while statement for search selection
							while(menuSelection !='R')
							{
								//setting search index
								currentInventory.setSearchedIndex(getSearchValue(input));

								//determining if search found
								if(currentInventory.getSearchedIndex() < 0)
								{
									//displaying search result
									displaySearchResult();
								}//end of if
								else
								{
									//setting last item searched index
									currentOrder.setLastItemSearchedIndex(currentInventory.getSearchedIndex());

									//assigning subject, verb, preposition, and object
									currentOrder.setPrintSubject(currentInventory.getPrintSubjects());
									currentOrder.setPrintVerb(currentInventory.getPrintVerbs());
									currentOrder.setPrintPreposition(currentInventory.getPrintPrepositions());
									currentOrder.setPrintObject(currentInventory.getPrintObjects());

									//displaying search result
									displaySearchResult(currentOrder.getPrintSubject(), currentOrder.getPrintVerb(),
											currentOrder.getPrintPreposition(), currentOrder.getPrintObject(),
											currentOrder.getPrintLength(), currentOrder.getPrintCost());

									//getting purchase selection
									menuSelection = validatePurchaseSelection(input);

									if(menuSelection == 'A')
									{
										//setting quantity
										currentOrder.setQuantity(validateNumberOfCopies(input));

										//writing to the record
										purchaseOrders.setWriteOneRecord(currentOrder.getPrintSubject(), currentOrder.getPrintVerb(), currentOrder.getPrintPreposition(),
												currentOrder.getPrintObject(), currentOrder.getPrintLength(), currentOrder.getQuantity(), currentOrder.getTotalCost());

										//display purchase notice
										displayPurchaseNotice(currentOrder.getQuantity(), currentOrder.getTotalCost());
									}//end of if

								}//end of else

								//updating search selection 
								menuSelection = validateSearchSelection(input);

							}//end of while for search selection

						}//end of else 

						//determining if search report should be printed
						if(currentInventory.getSearchCount()> 0)
						{
							//displaying search report
							displaySearchReport(userName, currentInventory.getSearchCount(),
									currentInventory.getSearchesFound(), currentInventory.getSearchesNotFound());
						}//end of if

						//resetting search counts
						currentInventory.setResetSearchCounts();

						//updating file selection 
						menuSelection = validateFileSelection(input);

					}//end of while loop for file selection

				}//end of else for search index

			}//end of else for main menu selection

			//updating main menu selection
			menuSelection = validateMenuSelection(input);

		}//end of while loop for main menu

		//determining if file report should be printed
		if(currentInventory.getFilesFound()>0)
		{
			//displaying file report
			displayFileReport(currentInventory.getFileCount(), currentInventory.getFilesFound(),
					currentInventory.getFilesNotFound());
		}//end of if

		//setting print arrays
		currentInventory.setPrintArrays(purchaseOrders.getFileName(), purchaseOrders.getRecordCount());

		//determining if final report should be printed
		if(purchaseOrders.getRecordCount()> 0)
		{
			//displaying final report
			displayFinalReport(currentInventory.getRecordCount(), currentInventory.getPrintSubjects(),
					currentInventory.getPrintVerbs(), currentInventory.getPrintPrepositions(),
					currentInventory.getPrintObjects(), currentInventory.getPrintLengths(),
					currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(),
					currentInventory.getWrittenOrderTotalQuantity(), currentInventory.getWrittenOrderTotalCost());
		}//end of if

		//displaying farewell message
		displayFarewellMessage();

		//closing the scanner
		input.close();
	}//end of main method

	//start of void methods

	//start of welcome banner
	public static void displayWelcomeBanner()
	{

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Welcome to the print shop software");
		System.out.println("Enjoy your shopping and have a great day!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	}//end of welcome banner

	//start of farewell banner
	public static void displayFarewellMessage()
	{

		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Thank you for shopping with us!");
		System.out.println("We hope you have a great day!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	}//end of farewell banner

	//start of account results
	public static void displayAccountResults()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	}//end of account results

	//start of account results
	public static void displayAccountResults(String borrowedUserName)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.printf("%s%s%s\n", "Account not created: username, ", borrowedUserName, ", already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	}//end of account results

	//start of login error
	public static void displayLoginError()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	}//end of account results


	//start of display not open 
	public static void displayFileError()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	}//end of display not open

	//start of record report
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.printf("%-3d%s\n", borrowedRecordCount, "records processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	}//end of record report

	//start of search result
	public static void displaySearchResult()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");					
		System.out.println("SEARCH RESULTS");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	}//end of search result

	//start of search result
	public static void displaySearchResult(String borrowedPrintSubject, String borrowedPrintVerb,
			String borrowedPrintPreposition, String borrowedPrintObject, int borrowedPrintLength,
			double borrowedPrintCost)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");					
		System.out.println("SEARCH RESULTS\n");
		System.out.printf("%-13s%-13s%-13s%s\n", "SUBJECT", "VERB", "PREPOSITION", "OBJECT");
		System.out.printf("%-13s%-13s%-13s%s\n",borrowedPrintSubject, borrowedPrintVerb, borrowedPrintPreposition,
				borrowedPrintObject);
		System.out.printf("\n%-13s%s\n", "LENGTH", "ESTIMATED COST" );
		System.out.printf("%-13d%s%8.2f\n", borrowedPrintLength, "$", borrowedPrintCost);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	}//end of search result

	//start of display purchase notice
	public static void displayPurchaseNotice(int borrowedQuantity, double borrowedTotalCost)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");					
		System.out.println("PROCESS CONFIRMATION\n");
		System.out.printf("%-13s%s\n", "QTY", "TOTAL");
		System.out.printf("%-13d%s%8.2f\n", borrowedQuantity, "$", borrowedTotalCost);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	}

	//start of search count report
	public static void displaySearchReport(String borrowedUserName, int borrowedSearchCount,
			int borrowedSearchesFound,int borrowedSearchesNotFound)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");					
		System.out.println("SEARCH COUNT REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");	
		System.out.printf("%-20s%s\n", "Employee Name:", borrowedUserName);
		System.out.printf("\n%s%17s%24s\n", "ATTEMPTS", "FOUND", "NOT FOUND");
		System.out.printf("%d%20d%20d\n", borrowedSearchCount, borrowedSearchesFound, borrowedSearchesNotFound);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");	

	}//end of search count report

	//start of file report
	public static void displayFileReport(int borrowedFileCount, int borrowedFilesFound,
			int borrowedFilesNotFound)
	{
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("FILE REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~\n");
		System.out.printf("%s%12s%24s\n", "OPEN ATTEMPTS", "FOUND", "NOT FOUND");
		System.out.printf("%d%20d%20d\n",borrowedFileCount,
				borrowedFilesFound, borrowedFilesNotFound);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~\n");

	}//end of file report display

	//start of final report
	public static void displayFinalReport(int borrowedRecordCount, String[] borrowedSubjects, String[] borrowedVerbs, String[] borrowedPrepositions,
			String[] borrowedObjects, int[] borrowedPrintLengths, int[] borrowedQuantities, double[] borrowedTotals, int borrowedTotalQuantities, double borrowedGrandTotal)
	{

		//local index for loop
		int localIndex = 0;

		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~\n");
		System.out.printf("%-10s%-14s%-6s%-14s%-6s%s\n", "SUBJECT", "VERB", "PREP", "OBJECT", "QTY", "TOTAL");

		//printing all of the arrays contents
		while(localIndex < borrowedRecordCount)
		{
			System.out.printf("%-10s%-14s%-6s%-14s%-6d%s%8.2f\n",borrowedSubjects[localIndex], borrowedVerbs[localIndex], borrowedPrepositions[localIndex],
					borrowedObjects[localIndex], borrowedQuantities[localIndex],"$", borrowedTotals[localIndex]);

			//incrementing local index
			localIndex++;
		}//end of while loop

		System.out.printf("\n%-24s%s\n","TOTAL QTY", "GRAND TOTAL");
		System.out.printf("%-24d%s%8.2f\n", borrowedTotalQuantities,"$", borrowedGrandTotal);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~\n");

	}//end of display final report

	//display main menu method
	public static void displayMainMenu()
	{
		int localIndex = 0;

		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU");
		while(localIndex<MENU_OPTIONS.length)
		{
			System.out.printf("%s%s%s\n", MENU_CHARS[localIndex], " for ", MENU_OPTIONS[localIndex]);
			//using a local index to print all information in the array
			localIndex++;
		}//end of while

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");

	}//end of main menu

	//display search menu
	public static void displaySearchMenu()
	{
		int localIndex = 0;

		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("SEARCH MENU");
		while(localIndex<SEARCH_MENU_OPTIONS.length)
		{
			System.out.printf("%s%s%s\n", SUB_MENU_CHARS[localIndex], " for ", SEARCH_MENU_OPTIONS[localIndex]);
			//using a local index to print all information in the array
			localIndex++;
		}//end of while

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");

	}//end of search menu

	//display purchase menu method
	public static void displayPurchaseMenu()
	{
		int localIndex = 0;

		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("PURCHASE MENU");
		while(localIndex<PURCHASE_MENU_OPTIONS.length)
		{
			System.out.printf("%s%s%s\n", SUB_MENU_CHARS[localIndex], " for ", PURCHASE_MENU_OPTIONS[localIndex]);
			//using a local index to print all information in the array
			localIndex++;
		}//end of while

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");

	}//end of purchase menu

	//display file menu method
	public static void displayFileMenu()
	{
		int localIndex = 0;

		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");
		while(localIndex<FILE_MENU_OPTIONS.length)
		{
			System.out.printf("%s%s%s\n", SUB_MENU_CHARS[localIndex], " for ", FILE_MENU_OPTIONS[localIndex]);
			//using a local index to print all information in the array
			localIndex++;
		}//end of while

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");

	}//end of file menu


	//VR methods

	//start of get user method
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Please enter your name: ");
		localUserName = borrowedInput.next();
		return localUserName;//returning the user name

	}//end of get user

	//start of get file name method
	public static String getFileName(Scanner borrowedInput)
	{
		String localFileName = "";
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the file name with extension (i.e. file.txt): ");

		//assigning given file name
		localFileName = borrowedInput.next();

		return localFileName;
	}//end of get file name

	//start of get password method
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your password: ");

		//assigning given password
		localPassword = borrowedInput.next();

		return localPassword;
	}//end of get password


	//start of get search method
	public static String getSearchValue(Scanner borrowedInput) 
	{
		String localSearchValue = "";
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the search value: ");

		//assigning given file name
		localSearchValue = borrowedInput.next();

		return localSearchValue;

	}// end of get for search value

	//start of get quantity method
	public static int validateNumberOfCopies(Scanner borrowedInput)
	{
		//creating a local how many to return
		int localHowMany = 0;
		//prime read
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the number of copies to print: ");
		localHowMany = borrowedInput.nextInt();

		//validation loop
		while(localHowMany <= 0)
		{

			//error message
			System.out.println("\n~~~~ ERROR: Invalid Quantity ~~~~");

			//updating the selection
			System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("Enter the number of quantities to print: ");
			localHowMany = borrowedInput.nextInt();
		}//end of while
		return localHowMany; //returning the quantity;
	}//end of validation how many

	//start of main menu method
	public static char validateMenuSelection(Scanner borrowedInput)
	{

		//creating a local selection to return
		char localSelection = ' ';
		//prime read
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validation loop
		while(localSelection != MENU_CHARS[0] && localSelection != MENU_CHARS[1] && localSelection != MENU_CHARS[2])
		{

			//error message
			System.out.println("\n~~~~ ERROR: Invalid Selection ~~~~\n");

			//updating the selection
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//end of loop
		return localSelection; //returning the selection
	}//end of validation main menu

	//start of search menu validation
	public static char validateSearchSelection(Scanner borrowedInput)
	{

		//creating a local selection to return
		char localSelection = ' ';
		//prime read
		displaySearchMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validation loop
		while(localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1])
		{

			//error message
			System.out.println("\n~~~~ ERROR: Invalid Selection ~~~~\n");

			//updating the selection
			displaySearchMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//end of loop
		return localSelection; //returning the selection
	}//end of validate search menu


	//start of purchase menu validation
	public static char validatePurchaseSelection(Scanner borrowedInput)
	{

		//creating a local selection to return
		char localSelection = ' ';
		//prime read
		displayPurchaseMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validation loop
		while(localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1])
		{

			//error message
			System.out.println("\n~~~~ ERROR: Invalid Selection ~~~~\n");

			//updating the selection
			displayPurchaseMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//end of loop
		return localSelection; //returning the selection
	}//end of validate purchase menu

	//start of purchase menu validation
	public static char validateFileSelection(Scanner borrowedInput)
	{

		//creating a local selection to return
		char localSelection = ' ';
		//prime read
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validation loop
		while(localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1])
		{

			//error message
			System.out.println("\n~~~~ ERROR: Invalid Selection ~~~~\n");

			//updating the selection
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//end of loop
		return localSelection; //returning the selection
	}//end of validate purchase menu


}//end of main class
